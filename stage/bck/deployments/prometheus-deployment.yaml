apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "14"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"prometheus-deployment","namespace":"monitoring"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"prometheus-server"}},"strategy":{"type":"Recreate"},"template":{"metadata":{"annotations":{"configHash":"349ab916beb797c12990bee90efb01da1475d4082b71f5ee27f6207fedda707c","rulesHash":"da09e49835536ca3451f618080126f698ed0a64ef95132c8fdea5679f3b1af07"},"labels":{"app":"prometheus-server"}},"spec":{"containers":[{"args":["--config.file=/etc/prometheus/prometheus.yml","--storage.tsdb.path=/prometheus/tsdb/","--storage.tsdb.retention=7d","--web.external-url=http://prometheus.stage.bookful.inceptionxr.com","--web.route-prefix=/","--web.enable-lifecycle"],"env":[{"name":"SPECIAL_LEVEL_KEY","valueFrom":{"configMapKeyRef":{"key":"alert.rules","name":"prometheus-rules"}}}],"image":"prom/prometheus:v2.11.1","name":"prometheus","ports":[{"containerPort":9090}],"resources":{"limits":{"cpu":0.9,"memory":"1.5Gi"},"requests":{"cpu":0.01,"memory":"1.5Gi"}},"volumeMounts":[{"mountPath":"/etc/prometheus/","name":"prometheus-config-volume"},{"mountPath":"/prometheus/","name":"prometheus-storage-volume"},{"mountPath":"/etc/prometheus-rules","name":"rules-volume"}]}],"initContainers":[{"command":["sh","-c","echo \"prometheus init container\" \u0026\u0026 [ ! -d \"/prometheus/tsdb\" ] \u0026\u0026 echo \"creating /prometheus/tsdb\" \u0026\u0026 mkdir /prometheus/tsdb \u0026\u0026 chown -R nobody:nogroup /prometheus/tsdb || echo \"folder /prometheus/tsdb already exist\""],"image":"busybox","name":"prometheus-init-container","volumeMounts":[{"mountPath":"/prometheus/","name":"prometheus-storage-volume"}]}],"volumes":[{"configMap":{"defaultMode":420,"name":"prometheus-server-conf"},"name":"prometheus-config-volume"},{"configMap":{"name":"prometheus-rules"},"name":"rules-volume"},{"name":"prometheus-storage-volume","persistentVolumeClaim":{"claimName":"prometheus-vol"}}]}}}}
  creationTimestamp: "2019-07-29T15:15:03Z"
  generation: 17
  name: prometheus-deployment
  namespace: monitoring
  resourceVersion: "744837901"
  uid: a3b5270a-b213-11e9-b4c2-42010a800067
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: prometheus-server
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        configHash: 349ab916beb797c12990bee90efb01da1475d4082b71f5ee27f6207fedda707c
        rulesHash: da09e49835536ca3451f618080126f698ed0a64ef95132c8fdea5679f3b1af07
      creationTimestamp: null
      labels:
        app: prometheus-server
    spec:
      containers:
      - args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/tsdb/
        - --storage.tsdb.retention=7d
        - --web.external-url=http://prometheus.stage.bookful.inceptionxr.com
        - --web.route-prefix=/
        - --web.enable-lifecycle
        env:
        - name: SPECIAL_LEVEL_KEY
          valueFrom:
            configMapKeyRef:
              key: alert.rules
              name: prometheus-rules
        image: prom/prometheus:v2.11.1
        imagePullPolicy: IfNotPresent
        name: prometheus
        ports:
        - containerPort: 9090
          protocol: TCP
        resources:
          limits:
            cpu: 900m
            memory: 1536Mi
          requests:
            cpu: 10m
            memory: 1536Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/prometheus/
          name: prometheus-config-volume
        - mountPath: /prometheus/
          name: prometheus-storage-volume
        - mountPath: /etc/prometheus-rules
          name: rules-volume
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - sh
        - -c
        - echo "prometheus init container" && [ ! -d "/prometheus/tsdb" ] && echo
          "creating /prometheus/tsdb" && mkdir /prometheus/tsdb && chown -R nobody:nogroup
          /prometheus/tsdb || echo "folder /prometheus/tsdb already exist"
        image: busybox
        imagePullPolicy: Always
        name: prometheus-init-container
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /prometheus/
          name: prometheus-storage-volume
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: prometheus-server-conf
        name: prometheus-config-volume
      - configMap:
          defaultMode: 420
          name: prometheus-rules
        name: rules-volume
      - name: prometheus-storage-volume
        persistentVolumeClaim:
          claimName: prometheus-vol
status:
  conditions:
  - lastTransitionTime: "2019-07-29T15:15:03Z"
    lastUpdateTime: "2020-05-04T15:26:39Z"
    message: ReplicaSet "prometheus-deployment-6f79747d76" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  - lastTransitionTime: "2022-06-06T08:52:25Z"
    lastUpdateTime: "2022-06-06T08:52:25Z"
    message: Deployment does not have minimum availability.
    reason: MinimumReplicasUnavailable
    status: "False"
    type: Available
  observedGeneration: 17
  replicas: 1
  unavailableReplicas: 1
  updatedReplicas: 1
